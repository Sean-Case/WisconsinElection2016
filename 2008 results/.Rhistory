# Which not in this list is an other candidate
names(sheet)[which(names(sheet) %!in%
c("county", "reporting_unit", "total_votes_cast", "dem", "rep", "scattering"))] <- "other"
# Remove first line of candidate names
sheet <- sheet[-1,]
sheet[,3:length(sheet)] = apply(sheet[,3:length(sheet)], 2, function(x) as.character(x))
sheet[,3:length(sheet)] = apply(sheet[,3:length(sheet)], 2, function(x) as.numeric(x))
sheet$other_t <- rowSums(sheet[names(sheet) == "other"], na.rm = T)
sheet[names(sheet) == "other"] <- NULL
names(sheet)[names(sheet) == "other_t"] <- "other"
if ("rep" %!in% names(sheet)) {
sheet$rep <- 0
}
if ("dem" %!in% names(sheet)) {
sheet$dem <- 0
}
mysheets[[i]] <- sheet
}
# lapply(mysheets[4:11], dim)
cong.2012 <- rbind(mysheets[[4]], mysheets[[5]], mysheets[[6]], mysheets[[7]], mysheets[[8]], mysheets[[9]], mysheets[[10]], mysheets[[11]])
rm(mysheets)
# Now need to combine the sheets together!
# Replace blanks with NA
cong.2012 = data.frame(apply(cong.2012, 2, function(x) gsub("^$|^ $", NA, x)))
cong.2012 = clean_names(cong.2012)
cong.2012[,3:length(cong.2012)] = apply(cong.2012[,3:length(cong.2012)], 2, function(x) as.character(x))
cong.2012[,3:length(cong.2012)] = apply(cong.2012[,3:length(cong.2012)], 2, function(x) as.numeric(x))
{ # Preparing basic data
cong.2012$county[cong.2012$county == ""] <- NA
require(zoo)
cong.2012$county <- na.locf(cong.2012$county)
cong.2012$reporting_unit = as.character(cong.2012$reporting_unit)
cong.2012$reporting_unit_orig <- cong.2012$reporting_unit
cong.2012$reporting_unit = ifelse(cong.2012$reporting_unit == "","Wards 1",cong.2012$reporting_unit)
cong.2012$reporting_unit = toupper(cong.2012$reporting_unit)
cong.2012$county = toupper(cong.2012$county)
cong.2012 <- subset(cong.2012, reporting_unit != "COUNTY TOTALS:")
cong.2012 <- subset(cong.2012, county != "OFFICE TOTALS:")
# Any commas in numbers will wreck all calculations, need to remove them
cong.2012 <- as.data.frame(lapply(cong.2012, function(y) (gsub(",", "", y))), stringsAsFactors = F)
# Get the municipality names from the reporting unit names
odd_indexes<-seq(1,length(cong.2012$reporting_unit)*2,2)
require(stringr)
cong.2012$reporting_unit[which(grepl("[0-9]", cong.2012$reporting_unit) == F)] <-
paste(cong.2012$reporting_unit[which(grepl("[0-9]", cong.2012$reporting_unit) == F)], "1", sep = " ")
cong.2012$reporting_unit <- gsub("WARD WD", "WARD", cong.2012$reporting_unit)
cong.2012$reporting_unit <- gsub("\\bWD\\b", "WARD", cong.2012$reporting_unit)
cong.2012$reporting_unit <- gsub("\\bWDS\\b", "WARDS", cong.2012$reporting_unit)
cong.2012$reporting_unit <- gsub("\\bWARD\\b", "WARD", cong.2012$reporting_unit)
cong.2012$reporting_unit <- gsub("WARD([0-9])", "WARD \\1", cong.2012$reporting_unit)
cong.2012$reporting_unit <- gsub("WARDS([0-9])", "WARDS \\1", cong.2012$reporting_unit)
cong.2012$municipality_name <- unlist(str_split(str = cong.2012$reporting_unit, " [0-9]", n = 2))[odd_indexes]
cong.2012$municipality_name <- gsub(" WARDS","", cong.2012$municipality_name)
cong.2012$municipality_name <- gsub(" WARD","", cong.2012$municipality_name)
cong.2012$municipality_name <- na.locf(cong.2012$municipality_name)
cong.2012$municipality_orig = cong.2012$municipality_name
# cong.2012$municipality_name = with(cong.2012, paste(municipality_type, "of", municipality,sep=" "))
# cong.2012$reporting_unit = with(cong.2012, paste(municipality_name, reporting_unit))
# colnames(cong.2012)[1:3] = c("county","municipality_name","reporting_unit")
# cong.2012$municipality_name = toupper(cong.2012$municipality_name)
# The following is fixing a problem I noticed later when trying to match with the 2016 voter df
cong.2012$municipality_name[grep("TOWN OF WINDSOR", cong.2012$municipality_name)] = "VILLAGE OF WINDSOR"
cong.2012$reporting_unit = gsub("TOWN OF WINDSOR","VILLAGE OF WINDSOR", cong.2012$reporting_unit)
# The town in Maine became a village in 2015, and is now in marathon county
# cong.2012$county[grep("TOWN OF MAINE", cong.2012$municipality_name)] = "MARATHON"
cong.2012$municipality_name[grepl("TOWN OF MAINE", cong.2012$municipality_name) &
grepl("MARATHON", cong.2012$county)
] = "VILLAGE OF MAINE"
# cong.2012$reporting_unit = gsub("TOWN OF MAINE","VILLAGE OF MAINE", cong.2012$reporting_unit)
# the town of Menasha was retained only for wards (8-10, 11-13). The rest (1-7) became the village of
# Fox Crossing, Winnebago
cong.2012$municipality_name[grepl("TOWN OF MENASHA WARDS 1, 2, 4, 7", cong.2012$reporting_unit)
] = "VILLAGE OF FOX CROSSING"
cong.2012$municipality_name[grepl("TOWN OF MENASHA WARDS 3, 5, 6", cong.2012$reporting_unit)
] = "VILLAGE OF FOX CROSSING"
cong.2012$reporting_unit[grepl("TOWN OF MENASHA WARDS 1, 2, 4, 7", cong.2012$reporting_unit)
] = "VILLAGE OF FOX CROSSING WARDS 1-2,4,7"
cong.2012$reporting_unit[grepl("TOWN OF MENASHA WARDS 3, 5, 6", cong.2012$reporting_unit)
] = "VILLAGE OF FOX CROSSING WARDS 3,5-6"
# cong.2012.look = with(cong.2012, data.frame(county, municipality_name,
#                                         reporting_unit, muni_county))
# colnames(cong.2012.look) = c("county","municipality","reporting_unit",
#                            "muni_county")
#
# require(zoo)
# cong.2012$congress_district = na.locf(cong.2012$congress_district)
cong.2012$county = na.locf(cong.2012$county)
trim.trailing <- function (x) sub("\\s+$", "", x)
cong.2012$county = trim.trailing(cong.2012$county)
cong.2012$municipality_name = toupper(cong.2012$municipality_name)
cong.2012$county = toupper(cong.2012$county)
cong.2012$muni_county = paste(cong.2012$municipality_name, cong.2012$county)
cong.2012$muni_county_orig = paste(cong.2012$municipality_orig, cong.2012$county)
###
cong.2012$reporting_unit = toupper(cong.2012$reporting_unit)
cong.2012$reporting_unit <- gsub("WARD WD", "WARD", cong.2012$reporting_unit)
cong.2012$reporting_unit <- gsub("\\bWD\\b", "WARD", cong.2012$reporting_unit)
cong.2012$reporting_unit <- gsub("\\bWDS\\b", "WARDS", cong.2012$reporting_unit)
cong.2012$reporting_unit <- gsub("\\bWARD\\b", "WARD", cong.2012$reporting_unit)
# https://stackoverflow.com/questions/26896971/add-space-between-two-letters-in-a-string-in-r
cong.2012$reporting_unit <- gsub("([A-Z]),([0-9])", "\\1\\2", cong.2012$reporting_unit)
cong.2012$reporting_unit <- gsub("([0-9])-([0-9])", "\\1\\2", cong.2012$reporting_unit)
cong.2012$reporting_unit <- gsub("([0-9])-([0-9])", "\\1\\2", cong.2012$reporting_unit)
cong.2012$reporting_unit <- gsub("([0-9])-([0-9])", "\\1\\2", cong.2012$reporting_unit)
cong.2012$reporting_unit <- gsub("([0-9]),([0-9])", "\\1\\2", cong.2012$reporting_unit)
cong.2012$reporting_unit <- gsub("([0-9]),([0-9])", "\\1\\2", cong.2012$reporting_unit)
cong.2012$reporting_unit <- gsub("WARD([0-9])", "WARD-\\1", cong.2012$reporting_unit)
cong.2012$reporting_unit <- gsub("WARDS([0-9])", "WARDS-\\1", cong.2012$reporting_unit)
# cong.2012$reporting_unit = gsub("WARDS","WARD",cong.2012$reporting_unit)
cong.2012$reporting_unit = gsub("  "," ",cong.2012$reporting_unit)
cong.2012$reporting_unit = gsub("&","-",cong.2012$reporting_unit)
cong.2012$reporting_unit = gsub("\\bAND\\b","-",cong.2012$reporting_unit)
cong.2012$reporting_unit = gsub(",","-",cong.2012$reporting_unit)
cong.2012$reporting_unit = gsub(" - ","-",cong.2012$reporting_unit)
cong.2012$reporting_unit = gsub(" -","-",cong.2012$reporting_unit)
cong.2012$reporting_unit = gsub("- ","-",cong.2012$reporting_unit)
cong.2012$reporting_unit = gsub(" ","-",cong.2012$reporting_unit)
cong.2012$reporting_unit = gsub("WD","",cong.2012$reporting_unit)
cong.2012$reporting_unit = gsub("COMBINED","",cong.2012$reporting_unit)
cong.2012$reporting_unit = toupper(cong.2012$reporting_unit)
cong.2012$reporting_unit = paste(cong.2012$reporting_unit, cong.2012$county, sep = "-")
cong.2012$reporting_unit = gsub(" ","-",cong.2012$reporting_unit)
cong.2012$reporting_unit = gsub("--","-",cong.2012$reporting_unit)
cong.2012.look = with(cong.2012, data.frame(county, municipality_name, municipality_orig, reporting_unit, reporting_unit_orig, muni_county))
colnames(cong.2012.look) = c("county","municipality","municipality_orig","reporting_unit", "reporting_unit_orig", "muni_county")
cong.2012.v = cong.2012
# cong.2012.v$county = NULL
cong.2012.v$county = NULL
cong.2012.v$municipality_name = NULL
cong.2012.v$municipality_type = NULL
cong.2012.v$municipalityno = NULL
cong.2012.v$municipality = NULL
cong.2012.v$municipality_orig = NULL
# cong.2012.v$reporting_unit = NULL
cong.2012.v$order = NULL
cong.2012.v$hindi = NULL
# cong.2012.v$assemblydistrict = NULL
# cong.2012.v = subset(  cong.2012.v, original_or_recount == "Recount")
cong.2012.l <- cong.2012.v
cong.2012.l$muni_county = NULL
cong.2012.l$reporting_unit <- NULL
cong.2012.l$muni_county_orig = NULL
cong.2012.l$reporting_unit_orig <- NULL
cong.2012.l$votes.tot <- NULL
cong.2012.l$x_3 <- NULL
cong.2012.l = gather(cong.2012.l, cand, votes_rec)
cong.2012.l$reporting_unit <- rep(cong.2012.v$reporting_unit)
# colnames(cong.2012.l) = c("reporting_unit", "cand", "votes.rec")
# cong.2012.l$original_or_recount = NULL
cong.2012.l$cand.group = NA
cong.2012.l$cand.group[grep("dem",cong.2012.l$cand)] = "democrat"
cong.2012.l$cand.group[grep("rep",cong.2012.l$cand)] = "republican"
cong.2012.l$cand.group[grep("ind",cong.2012.l$cand)] = "other"
cong.2012.l$cand.group[grep("con",cong.2012.l$cand)] = "other"
cong.2012.l$cand.group[grep("scattering",cong.2012.l$cand)] = "other"
cong.2012.l$cand.group[grep("other",cong.2012.l$cand)] = "other"
# Joining back county and municipality names
cong.2012.l = plyr::join(cong.2012.l, cong.2012.look, by = "reporting_unit", match = "first")
cong.2012.l$votes_rec = as.numeric(as.integer(cong.2012.l$votes_rec))
tot.votes.look.group = dplyr::group_by(cong.2012.l,reporting_unit)
tot.votes.look = dplyr::summarise(tot.votes.look.group,
votes_tot = sum(votes_rec,na.rm=T)
)
cong.2012.l = plyr::join(cong.2012.l,tot.votes.look,by="reporting_unit",match="first")
cong.2012.l$votes_perc = (cong.2012.l$votes_rec / cong.2012.l$votes_tot) * 100
cong.2012.l$muni_county = paste(cong.2012.l$municipality, cong.2012.l$county)
# cong.2012.l$votes_perc = (cong.2012.l$votes_rec / cong.2012.l$votes_tot) * 100
cong.2012.l$votes_tot <- NULL
cong.2012.melt = melt(cong.2012.l)
cong.2012.cast = dcast(cong.2012.melt, reporting_unit + reporting_unit_orig + muni_county + municipality + municipality_orig + county ~ variable + cand.group, sum,na.rm=T)
cong.2012.l = cong.2012.cast
cong.2012.l[,grep("_NA", names(cong.2012.l))] <- NULL
cong.2012.l = plyr::join(cong.2012.l,tot.votes.look,by="reporting_unit",match="first")
# cong.2012.l$trump_prim_won = with(cong.2012.l,
#                                        ifelse(votes_perc_trump > votes_perc_kasich &
#                                                 votes_perc_trump > votes_perc_cruz &
#                                                 votes_perc_trump > votes_perc_other,1,0))
#
# cong.2012.l$votes_tot_cruz = NULL
# cong.2012.l$votes_tot_trump = NULL
# cong.2012.l$votes_tot_kasich = NULL
colnames(cong.2012.l)[grep("votes_tot_other",colnames(cong.2012.l))] = "votes_tot"
# rm(cong.2012.cast,cong.2012.melt,
# cong.2012.mun.group ,
# cong.2012, cong.2012.look, cong.2012.v,
# tot.votes.look,tot.votes.look.group)
} # Preparing basic data
{ # GAB  / EDL stats
gabdata.2012.cong = read.xlsx2(
"20121106_gab190_statistics_xls_14031.xls",
stringsAsFactors = F,
header = T,
sheetIndex = 1,
colClasses = NA
)
# Preparing basic data
gabdata.2012.cong = clean_names(gabdata.2012.cong)
gabdata.2012.cong$reporting_unit_orig = gabdata.2012.cong$reporting_unit
# gabdata.2012.cong$reporting_unit = toupper(gabdata.2012.cong$reporting_unit)
gabdata.2012.cong$municipality = toupper(gabdata.2012.cong$municipality)
gabdata.2012.cong$county = toupper(gabdata.2012.cong$county)
gabdata.2012.cong$county = gsub(" COUNTY","", gabdata.2012.cong$county)
gabdata.2012.cong$muni_county = paste(gabdata.2012.cong$municipality, gabdata.2012.cong$county)
gabdata.2012.cong$reporting_unit = paste(gabdata.2012.cong$municipality,gabdata.2012.cong$reporting_unit)
gabdata.2012.cong$reporting_unit = toupper(gabdata.2012.cong$reporting_unit)
gabdata.2012.cong$reporting_unit[which(grepl("[0-9]", gabdata.2012.cong$reporting_unit) == F)] <-
paste(gabdata.2012.cong$reporting_unit[which(grepl("[0-9]", gabdata.2012.cong$reporting_unit) == F)], "1", sep = " ")
# The following is fixing a problem I noticed later when trying to match with the 2016 voter df
gabdata.2012.cong$municipality[grep("TOWN OF WINDSOR", gabdata.2012.cong$municipality)] = "VILLAGE OF WINDSOR"
gabdata.2012.cong$reporting_unit = gsub("TOWN OF WINDSOR","VILLAGE OF WINDSOR", gabdata.2012.cong$reporting_unit)
# The town in Maine became a village in 2015, and is now in marathon county
# gabdata.2012.cong$county[grep("TOWN OF MAINE", gabdata.2012.cong$municipality)] = "MARATHON"
gabdata.2012.cong$municipality[grepl("TOWN OF MAINE", gabdata.2012.cong$municipality) &
grepl("MARATHON", gabdata.2012.cong$county)
] = "VILLAGE OF MAINE"
# gabdata.2012.cong$reporting_unit = gsub("TOWN OF MAINE","VILLAGE OF MAINE", gabdata.2012.cong$reporting_unit)
# the town of Menasha was retained only for wards (8-10, 11-13). The rest (1-7) became the village of
# Fox Crossing, Winnebago
gabdata.2012.cong$municipality[grepl("TOWN OF MENASHA WARDS 1, 2, 4, 7", gabdata.2012.cong$reporting_unit)
] = "VILLAGE OF FOX CROSSING"
gabdata.2012.cong$municipality[grepl("TOWN OF MENASHA WARDS 3, 5, 6", gabdata.2012.cong$reporting_unit)
] = "VILLAGE OF FOX CROSSING"
gabdata.2012.cong$reporting_unit[grepl("TOWN OF MENASHA WARDS 1, 2, 4, 7", gabdata.2012.cong$reporting_unit)
] = "VILLAGE OF FOX CROSSING WARDS 1-2,4,7"
gabdata.2012.cong$reporting_unit[grepl("TOWN OF MENASHA WARDS 3, 5, 6", gabdata.2012.cong$reporting_unit)
] = "VILLAGE OF FOX CROSSING WARDS 3,5-6"
gabdata.2012.cong$muni_county = paste(gabdata.2012.cong$municipality, gabdata.2012.cong$county)
gabdata.2012.cong$reporting_unit = paste(gabdata.2012.cong$reporting_unit, gabdata.2012.cong$county)
gabdata.2012.cong$reporting_unit <- gsub("WARD WD", "WARD", gabdata.2012.cong$reporting_unit)
gabdata.2012.cong$reporting_unit <- gsub("\\bWD\\b", "WARD", gabdata.2012.cong$reporting_unit)
gabdata.2012.cong$reporting_unit <- gsub("\\bWDS\\b", "WARDS", gabdata.2012.cong$reporting_unit)
gabdata.2012.cong$reporting_unit <- gsub("\\bWARD\\b", "WARD", gabdata.2012.cong$reporting_unit)
# https://stackoverflow.com/questions/26896971/add-space-between-two-letters-in-a-string-in-r
gabdata.2012.cong$reporting_unit <- gsub("([A-Z]),([0-9])", "\\1\\2", gabdata.2012.cong$reporting_unit)
gabdata.2012.cong$reporting_unit <- gsub("([0-9])-([0-9])", "\\1\\2", gabdata.2012.cong$reporting_unit)
gabdata.2012.cong$reporting_unit <- gsub("([0-9])-([0-9])", "\\1\\2", gabdata.2012.cong$reporting_unit)
gabdata.2012.cong$reporting_unit <- gsub("([0-9])-([0-9])", "\\1\\2", gabdata.2012.cong$reporting_unit)
gabdata.2012.cong$reporting_unit <- gsub("([0-9]),([0-9])", "\\1\\2", gabdata.2012.cong$reporting_unit)
gabdata.2012.cong$reporting_unit <- gsub("([0-9]),([0-9])", "\\1\\2", gabdata.2012.cong$reporting_unit)
gabdata.2012.cong$reporting_unit <- gsub("WARD([0-9])", "WARD-\\1", gabdata.2012.cong$reporting_unit)
gabdata.2012.cong$reporting_unit <- gsub("WARDS([0-9])", "WARDS-\\1", gabdata.2012.cong$reporting_unit)
# gabdata.2012.cong$reporting_unit = gsub("WARDS","WARD",gabdata.2012.cong$reporting_unit)
gabdata.2012.cong$reporting_unit = gsub("  "," ",gabdata.2012.cong$reporting_unit)
gabdata.2012.cong$reporting_unit = gsub("&","-",gabdata.2012.cong$reporting_unit)
gabdata.2012.cong$reporting_unit = gsub("\\bAND\\b","-",gabdata.2012.cong$reporting_unit)
gabdata.2012.cong$reporting_unit = gsub(",","-",gabdata.2012.cong$reporting_unit)
gabdata.2012.cong$reporting_unit = gsub(" - ","-",gabdata.2012.cong$reporting_unit)
gabdata.2012.cong$reporting_unit = gsub(" -","-",gabdata.2012.cong$reporting_unit)
gabdata.2012.cong$reporting_unit = gsub("- ","-",gabdata.2012.cong$reporting_unit)
gabdata.2012.cong$reporting_unit = gsub(" ","-",gabdata.2012.cong$reporting_unit)
gabdata.2012.cong$reporting_unit = gsub("WD","",gabdata.2012.cong$reporting_unit)
gabdata.2012.cong$reporting_unit = gsub("COMBINED","",gabdata.2012.cong$reporting_unit)
gabdata.2012.cong$reporting_unit = gsub(" ","-",gabdata.2012.cong$reporting_unit)
gabdata.2012.cong$reporting_unit = gsub("--","-",gabdata.2012.cong$reporting_unit)
# Fixing a couple of failed matches I noticed from later
# gabdata.2012.cong$reporting_unit[grepl("CITY-OF-MENASHA-WARDS-1A-2-4-7-WINNEBAGO", gabdata.2012.cong$reporting_unit)] = "TOWN-OF-MENASHA-WARDS-1-2-4-7-WINNEBAGO"
# gabdata.2012.cong$reporting_unit[grepl("CITY-OF-MENASHA-WARDS-3-5-6-WINNEBAGO", gabdata.2012.cong$reporting_unit)] = "TOWN-OF-MENASHA-WARDS-3-5-6-WINNEBAGO"
gabdata.repunit <- gabdata.2012.cong
} # GAB voting statistics
{ # Matching voting statistics with the election statistics
gabdata.join = with(gabdata.repunit, data.frame(reporting_unit,muni_county, hindi))
gabdata.join$total_ballots = ifelse(gabdata.repunit$total_ballots == 0,
gabdata.repunit$total_electors,
gabdata.repunit$total_ballots)
gabdata.join$tch_prop = with(gabdata.repunit, dre / total_ballots)
gabdata.join$tch_prop = ifelse(gabdata.join$tch_prop>1, 1, gabdata.join$tch_prop)
gabdata.join$os_prop = with(gabdata.repunit, optical_scan / total_ballots)
gabdata.join$os_prop = ifelse(gabdata.join$os_prop>1, 1, gabdata.join$os_prop)
gabdata.join$turnout_perc = with(gabdata.repunit, total_ballots / registrants)
gabdata.join$turnout_perc[gabdata.join$turnout_perc == Inf] = NA
gabdata.join$sameday_reg_prop = with(gabdata.repunit, ed_rs / registrants)
gabdata.join$sameday_reg_prop[gabdata.join$sameday_reg_prop == Inf] = NA
gabdata.join$counted_absent_prop = with(gabdata.repunit,
absentee_counted / total_ballots)
gabdata.join$counted_absent_prop[gabdata.join$counted_absent_prop == Inf] = NA
gabdata.join$rejected_absent_prop = with(gabdata.repunit,
absentee_rejected / total_ballots)
gabdata.join$absentee_undeliverable = with(gabdata.repunit,
absentee_undeliverable / total_ballots)
gabdata.join$registrants = with(gabdata.repunit, registrants)
gabdata.join$late_registrants = with(gabdata.repunit, late_registrants / total_ballots)
gabdata.join[is.na(gabdata.join)] = NA
# table(cong.2012.l$reporting_unit %in% gabdata.join$reporting_unit)
cong.2012.new = plyr::join(cong.2012.l, gabdata.join, by = "reporting_unit")
cong.2012.l = cong.2012.new
cong.2012.l[is.na(cong.2012.l)] = NA
rm(cong.2012.new)
setdiff(cong.2012.l$reporting_unit, gabdata.join$reporting_unit)
# [1] "TOWN-OF-MENASHA-WARDS-1-2-4-7-WINNEBAGO" "TOWN-OF-MENASHA-WARDS-3-5-6-WINNEBAGO"
# The two above places seem not to exist simply
} # Matching voting statistics with election results
{
# Adding demographic data to the ward data frame
demographics.caps = demographics
demographics.caps$county = toupper(demographics.caps$county)
demographics.caps.join <- with(demographics.caps, data.frame(county, county_paper_or_paperplusmachine, medianhouseholdincome_2009.2013, pop_sq_mile_2010, ratio_nocollege_college))
# Demographics from David Griffen and co
cong.2012.dem = plyr::join(cong.2012.l, demographics.caps.join, by = "county", match = "first")
elec.snapshot.dem$county = toupper( elec.snapshot.dem$county)
elec.snapshot.dem.join <- with(elec.snapshot.dem, data.frame(county, pct_white,
pct_graduate,  inc_2015,unemp_rate,
pct_male, pct_old, pct_latino, pct_white,
pct_black, pct_hs))
# Also joining the data from the Election snapshot
cong.2012.dem = plyr::join(cong.2012.dem, elec.snapshot.dem.join, by = "county", match = "first")
} # Pasting demographics onto the dataframe
{
setwd("C:/Users/s_cas/Dropbox (NEF Consulting)/2016 voting election county results/Wisconsin/All prep together/All processed files")
off_vote_machines = read_excel("voting_equipment_by_municipality_09_2016_xlsx_78114.xlsx1207162619.xlsx",
sheet = 1)
colnames(off_vote_machines)[3] = "os_model_off"
colnames(off_vote_machines)[4] = "tch_bmd_model_off"
off_vote_machines$tch_use_off = NA
off_vote_machines$tch_use_off = ifelse(off_vote_machines$tch_bmd_model_off == "Dominion (Premier)-Accuvote TSX" |
off_vote_machines$tch_bmd_model_off == "Dominion (Sequoia)/Command Central-Edge" |
off_vote_machines$tch_bmd_model_off == "Dominion (Sequoia)/Command Central-Edge; ES&S Automark" |
off_vote_machines$tch_bmd_model_off == "ES&S iVotronic",1, 0
)
off_vote_machines$bmd_use_off = NA
off_vote_machines$bmd_use_off = ifelse(off_vote_machines$tch_bmd_model_off == "Dominion ImageCast Evolution" |
off_vote_machines$tch_bmd_model_off == "ES&S Automark" |
off_vote_machines$tch_bmd_model_off == "ES&S ExpressVote" |
off_vote_machines$tch_bmd_model_off == "Populex-Populex 2.3" |
off_vote_machines$tch_bmd_model_off == "Vote Pad-Vote Pad (non-electronic)"
,1, 0
)
off_vote_machines$os_use_off = NA
off_vote_machines$os_use_off = ifelse(off_vote_machines$os_model_off == "None ",
0, 1
)
off_vote_machines$os_model_off = ifelse(off_vote_machines$os_model_off == "None ",
NA, off_vote_machines$os_model_off
)
off_vote_machines$tch_model_off = NA
off_vote_machines$tch_model_off = ifelse(off_vote_machines$tch_use_off == 1,
off_vote_machines$tch_bmd_model_off, NA  )
off_vote_machines$bmd_model_off = NA
off_vote_machines$bmd_model_off = ifelse(off_vote_machines$bmd_use_off == 1,
off_vote_machines$tch_bmd_model_off, NA  )
off_vote_machines$tch_use_off_true = NA
off_vote_machines$tch_use_off_true = ifelse(off_vote_machines$os_use_off == 0,
off_vote_machines$tch_use_off, 0  )
code_2 = gsub( " COUNTY.*$", "", off_vote_machines$County)
code_3 = gsub( " -.*$", "", off_vote_machines$Municipality)
off_vote_machines$muni_county = paste(code_3,code_2, sep = " ")
#
# unique(grepl("550101201",cong.2012.dem$MCD_FIPS))
# setdiff(off_vote_machines$muni_county, cong.2012.dem$muni_county)
# off_vote_machines$muni_county[grep("TOWN OF GEORGETOWN  POLK", off_vote_machines$muni_county)] = "TOWN OF GEORGETOWN POLK"
# off_vote_machines$muni_county[grep("TOWN OF WINDSOR DANE", off_vote_machines$muni_county)] = "VILLAGE OF WINDSOR DANE"
# off_vote_machines$muni_county[grep("TOWN OF MAINE MARATHON", off_vote_machines$muni_county)] = "VILLAGE OF MAINE MARATHON"
# setdiff(cong.2012.dem$muni_county, off_vote_machines$muni_county) # Difference of 47
# length(off_vote_machines$muni_county) # 1854
# length(cong.2012.dem$muni_county) # 1900 Difference of 46. Plus the errant space = 47. Therefore, these places are simply not included in the official list?
off_vote_machines_cut = off_vote_machines
off_vote_machines$County = NULL
off_vote_machines$Municipality = NULL
cong.2012.dem = plyr::join(cong.2012.dem, off_vote_machines, by = "muni_county")
cong.2012.dem$tch_model_off_full = NA
cong.2012.dem$tch_model_off_full = with(cong.2012.dem, ifelse(tch_model_off == "Dominion (Premier)-Accuvote TSX",
"Dominion (Premier)-Accuvote TSX", cong.2012.dem$tch_model_off_full))
cong.2012.dem$tch_model_off_full = with(cong.2012.dem, ifelse(tch_model_off == "Dominion (Sequoia)/Command Central-Edge",
"Dominion (Sequoia)/Command Central-Edge",cong.2012.dem$tch_model_off_full))
cong.2012.dem$tch_model_off_full = with(cong.2012.dem, ifelse(tch_model_off == "Dominion (Sequoia)/Command Central-Edge; ES&S Automark",
"Dominion (Sequoia)/Command Central-Edge",cong.2012.dem$tch_model_off_full))
cong.2012.dem$tch_model_off_full = with(cong.2012.dem, ifelse(tch_model_off == "ES&S iVotronic",
"ES&S iVotronic",cong.2012.dem$tch_model_off_full))
cong.2012.dem$tch_model_off_full[is.na(cong.2012.dem$tch_model_off_full)] = "aNone"
cong.2012.dem$tch_model_off_full = with(cong.2012.dem, ifelse(is.na(tch_use_off),
NA,cong.2012.dem$tch_model_off_full))
colnames(cong.2012.dem)[grep("tch.use",colnames(cong.2012.dem),fixed = T)] = "tch_use_verivote"
colnames(cong.2012.dem)[grep("os.use",colnames(cong.2012.dem),fixed = T)] = "os_use_verivote"
colnames(cong.2012.dem)[grep("bmd.use",colnames(cong.2012.dem),fixed = T)] = "bmd_use_verivote"
colnames(cong.2012.dem)[grep("X._collegedegreepersons25._2013",colnames(cong.2012.dem))] = "coll_deg_plus25_2013"
} # Putting in voting machines
{ # Making model df
model.2012.cong.repunit.df = cong.2012.dem
# model.2012.cong.df = subset(model.2012.cong.df, votes_tot > 19)
# Following Nate Cohn's method: https://twitter.com/Nate_Cohn/status/801226924156719104/photo/1?ref_src=twsrc%5Etfw
# I found it's better to use the non-logged version of pop.sq.mile.2010
model.2012.cong.repunit.df$log.pop.sq.mile.2010 = log(model.2012.cong.repunit.df$pop_sq_mile_2010)
# ratio college and income are both highly correlated so maybe don't use median income
# population density is highly correlated with black population, so I removed population density
# I was not able to effectively model Menonminee county with my data (it has a very high Amerindian population). So,
# I replaced the correlated and generally not significant 'white_pct' variable with 'white_nonwhite*
##
# sort(names(model.2012.cong.repunit.df))
model.2012.cong.repunit.df2 = with(model.2012.cong.repunit.df, data.frame(reporting_unit, reporting_unit_orig, county, muni_county, hindi, votes_perc_republican, votes_perc_democrat, votes_perc_other,turnout_perc, tch_prop, os_prop, counted_absent_prop,rejected_absent_prop, absentee_undeliverable,
sameday_reg_prop, total_ballots,registrants,late_registrants, votes_tot,
county_paper_or_paperplusmachine,
ratio_nocollege_college, log.pop.sq.mile.2010,
pop_sq_mile_2010,tch_model_off_full, os_model_off, bmd_model_off,
medianhouseholdincome_2009.2013))
rownames(model.2012.cong.repunit.df2) = model.2012.cong.repunit.df2$reporting_unit
model.2012.cong.repunit.df = model.2012.cong.repunit.df2
# model.2012.cong.repunit.df$MCD_FIPS = as.character(model.2012.cong.repunit.df$MCD_FIPS)
tig_dems = read.csv("tiger_demographics.csv", colClasses = "character", stringsAsFactors = F)
tig_dems_join = with(tig_dems,data.frame(hindi))
# colnames(tig_dems_join) = "MCD_FIPS"
# tig_dems_join$MCD_FIPS = gsub("06000US","",tig_dems_join$MCD_FIPS)
tig_dems_join$pop = tig_dems$pop
tig_dems_join$inc_2015 = tig_dems$percap_inc_2015
tig_dems_join$unemp_rate = tig_dems$unemp_1864_perc
tig_dems_join$pct_graduate = tig_dems$bach_perc
# tig_dems_join$bach_perc = tig_dems$bach_perc
tig_dems_join$pct_white = tig_dems$white_perc
tig_dems_join$pct_black = tig_dems$black_perc
tig_dems_join$pct_latino = tig_dems$hisp_perc
tig_dems_join$pct_male = tig_dems$male_perc
tig_dems_join$age_med = tig_dems$age_med # NOTE THIS IS NOW MEDIAN AGE NOT PCT OLD
tig_dems_join$house_size_ave = tig_dems$house_size_ave
tig_dems_join$muni.dense = tig_dems$muni.dense
tig_dems_join$hindi <- as.character(tig_dems_join$hindi)
tig_dems_join$hindi <- with(tig_dems_join, ifelse(nchar(hindi) == 4, paste("0",hindi, sep = ""), hindi))
tig_dems_join[,2:length(tig_dems_join)] <- apply(tig_dems_join[,2:length(tig_dems_join)],2,as.numeric)
model.2012.cong.repunit.df = plyr::join(model.2012.cong.repunit.df,tig_dems_join, by = "hindi", match = "first")
} # Making model df
write.csv(model.2012.cong.repunit.df,"Prepped files/2012/model_2012_cong_repunit.csv")
# Congressional 2008 data ------------------------------------------------
setwd("C:/Users/s_cas/Dropbox (NEF Consulting)/2016 voting election county results/Wisconsin/All prep together/2008 results")
cong.2008 = read_excel(
"2008_FallElection_USCongress_WardbyWard.xls",
stringsAsFactors = F,
header = T,
strip.white = T
)
cong.2008 = read_excel(
"2008_FallElection_USCongress_WardbyWard.xls"
)
View(cong.2008)
# Some 2008 specific preparation
cong.2008 = cong.2008[,11:27]
rowSums(is.na(data)) != ncol(data)
rowSums(is.na(cong.2008)) != ncol(cong.2008)
which)(rowSums(is.na(cong.2008)) == ncol(cong.2008))
which(rowSums(is.na(cong.2008)) == ncol(cong.2008))
rowSums(is.na(cong.2008)) == ncol(cong.2008)
table(rowSums(is.na(cong.2008)) == ncol(cong.2008))
cong.2008[1131,]
cong.2008[1130,]
?read_excel
# Some 2008 specific preparation
cong.2008 = cong.2008[,11:27]
cong.2008 = read_excel(
"2008_FallElection_USCongress_WardbyWard.xls"
)
# Some 2008 specific preparation
cong.2008 = cong.2008[,11:21]
cong.2008 = clean_names(cong.2008)
cong.2008[1130,]
cong.2008[1331,]
cong.2008[1330,]
which(cong.2008$reporting_unit == "TOTAL")
test <- split(cong.2008, cong.2008$reporting_unit == "TOTAL")
View(test)
where_total <- which(cong.2008$reporting_unit == "TOTAL")
last_row <- 1
where_total <- which(cong.2008$reporting_unit == "TOTAL")
last_row <- 1
for (i in length(cong.2008$reporting_unit == "TOTAL")){
test[i] <- data.frame(cong.2008[last_row:where_total[i],])
last_row <- where_total[i]
}
test <- list()
for (i in length(cong.2008$reporting_unit == "TOTAL")){
test[i] <- data.frame(cong.2008[last_row:where_total[i],])
last_row <- where_total[i]
}
where_total <- which(cong.2008$reporting_unit == "TOTAL")
last_row <- 1
test <- list()
for (i in length(cong.2008$reporting_unit == "TOTAL")){
test[i] <- cong.2008[last_row:where_total[i],]
last_row <- where_total[i]
}
where_total <- which(cong.2008$reporting_unit == "TOTAL")
last_row <- 1
test <- list()
i <- 1
test[i] <- cong.2008[last_row:where_total[i],]
last_row:where_total[i]
cong.2008[last_row:where_total[i],]
last_row <- where_total[i]
where_total <- which(cong.2008$reporting_unit == "TOTAL")
last_row <- 1
test <- list()
i <- 1
for (i in length(cong.2008$reporting_unit == "TOTAL")){
test[[i]] <- cong.2008[last_row:where_total[i],]
last_row <- where_total[i]
}
(length(cong.2008$reporting_unit == "TOTAL")-1)
length(cong.2008$reporting_unit == "TOTAL")
for (i in (length(which(cong.2008$reporting_unit == "TOTAL"))-1)){
test[[i]] <- cong.2008[last_row:where_total[i],]
last_row <- where_total[i]
}
for (i in (length(which(cong.2008$reporting_unit == "TOTAL")))){
test[[i]] <- cong.2008[last_row:where_total[i],]
last_row <- where_total[i]
}
where_total[i]
test[1]
test[2]
cong.2008[last_row:where_total[i],]
last_row
(length(which(cong.2008$reporting_unit == "TOTAL")))
for (i in 1:(length(which(cong.2008$reporting_unit == "TOTAL")))){
test[[i]] <- cong.2008[last_row:where_total[i],]
last_row <- where_total[i]
}
test[[1]]
