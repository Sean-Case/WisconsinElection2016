off_vote_machines$tch_bmd_model_off == "Vote Pad-Vote Pad (non-electronic)"
,1, 0
)
off_vote_machines$os_use_off = NA
off_vote_machines$os_use_off = ifelse(off_vote_machines$os_model_off == "None ",
0, 1
)
# unique(off_vote_machines$os_model_off)
off_vote_machines$os_model_off = ifelse(off_vote_machines$os_model_off == "None ",
NA, off_vote_machines$os_model_off
)
off_vote_machines$tch_model_off = NA
off_vote_machines$tch_model_off = ifelse(off_vote_machines$tch_use_off == 1,
off_vote_machines$tch_bmd_model_off, NA
)
off_vote_machines$bmd_model_off = NA
off_vote_machines$bmd_model_off = ifelse(off_vote_machines$bmd_use_off == 1,
off_vote_machines$tch_bmd_model_off, NA
)
off_vote_machines$tch_use_off_true = NA
off_vote_machines$tch_use_off_true = ifelse(off_vote_machines$os_use_off == 0,
off_vote_machines$tch_use_off, 0
)
# table(off_vote_machines$tch_use_off_true)
# #code_2 = substrRight(off_vote_machines$County, 2)
code_2 = gsub( " COUNTY.*$", "", off_vote_machines$County)
# #code_3 = substrRight(off_vote_machines$Municipality, 5)
code_3 = gsub( " -.*$", "", off_vote_machines$Municipality)
off_vote_machines$muni_county = paste(code_3,code_2, sep = " ")
#
# unique(grepl("550101201",model.o.df$MCD_FIPS))
# setdiff(off_vote_machines$muni_county, model.o.df$muni_county)
# off_vote_machines$muni_county[grep("TOWN OF GEORGETOWN  POLK", off_vote_machines$muni_county)] = "TOWN OF GEORGETOWN POLK"
# off_vote_machines$muni_county[grep("TOWN OF WINDSOR DANE", off_vote_machines$muni_county)] = "VILLAGE OF WINDSOR DANE"
# off_vote_machines$muni_county[grep("TOWN OF MAINE MARATHON", off_vote_machines$muni_county)] = "VILLAGE OF MAINE MARATHON"
# setdiff(model.o.df$muni_county, off_vote_machines$muni_county) # Difference of 47
# length(off_vote_machines$muni_county) # 1854
# length(model.o.df$muni_county) # 1900 Difference of 46. Plus the errant space = 47. Therefore, these places are simply not included in the official list?
off_vote_machines_cut = off_vote_machines
off_vote_machines$County = NULL
off_vote_machines$Municipality = NULL
model.o.df = join(model.o.df, off_vote_machines, by = "muni_county")
model.o.df$tch_model_off_full = NA
model.o.df$tch_model_off_full = with(model.o.df, ifelse(tch_model_off == "Dominion (Premier)-Accuvote TSX",
"Dominion (Premier)-Accuvote TSX", model.o.df$tch_model_off_full))
model.o.df$tch_model_off_full = with(model.o.df, ifelse(tch_model_off == "Dominion (Sequoia)/Command Central-Edge",
"Dominion (Sequoia)/Command Central-Edge",model.o.df$tch_model_off_full))
model.o.df$tch_model_off_full = with(model.o.df, ifelse(tch_model_off == "Dominion (Sequoia)/Command Central-Edge; ES&S Automark",
"Dominion (Sequoia)/Command Central-Edge",model.o.df$tch_model_off_full))
model.o.df$tch_model_off_full = with(model.o.df, ifelse(tch_model_off == "ES&S iVotronic",
"ES&S iVotronic",model.o.df$tch_model_off_full))
model.o.df$tch_model_off_full[is.na(model.o.df$tch_model_off_full)] = "aNone"
model.o.df$tch_model_off_full = with(model.o.df, ifelse(is.na(tch_use_off),
NA,model.o.df$tch_model_off_full))
# model.o.df[grep("tch_use_verivote.1",colnames(model.o.df))] = NULL
# model.o.df[grep("tch_use_verivote.2",colnames(model.o.df))] = NULL
#
colnames(model.o.df)[grep("tch.use",colnames(model.o.df),fixed = T)] = "tch_use_verivote"
colnames(model.o.df)[grep("os.use",colnames(model.o.df),fixed = T)] = "os_use_verivote"
colnames(model.o.df)[grep("bmd.use",colnames(model.o.df),fixed = T)] = "bmd_use_verivote"
colnames(model.o.df)[grep("X._collegedegreepersons25._2013",colnames(model.o.df))] = "coll_deg_plus25_2013"
} # Adding in voting machines
{
model.o.df$demwinner = NA
model.o.df$demwinner = ifelse(model.o.df$democrat_votes.perc >
model.o.df$republican_votes.perc &
!is.na(model.o.df$democrat_votes.perc), 1,0)
model.o.df$demwinner = factor(model.o.df$demwinner)
model.o.df$demwinner2012 = NA
model.o.df$demwinner2012 = ifelse(model.o.df$dem.perc2012 >
model.o.df$rep.perc2012 &
!is.na(model.o.df$democrat_votes.perc), 1,0)
model.o.df$demwinner2012 = factor(model.o.df$demwinner2012)
} # Dem won in 2012
{ # Subsetting data for the models
# Only keep municipalities with 20 or more people voting - below this is too skewed
model.o.df = subset(model.o.df, votes.tot2016 > 19)
model.o.df$turnout.2012[model.o.df$turnout.2012 > 120] = NA
model.o.df$turnout.2012[model.o.df$turnout.2012 < 30] = NA
model.o.df$turnout.2016.perc[model.o.df$votes.tot2016 < 20] = NA
model.o.df$turnout.2012[model.o.df$votes.tot2012 < 20] = NA
turnout.high.2012 = subset(model.o.df, turnout.2012 > 100)
model.o.df$dem.change.perc[model.o.df$dem.change.perc < - 49] = NA
model.o.df$rep.change.perc[model.o.df$rep.change.perc < - 49] = NA
model.o.df$rep.change.perc[model.o.df$rep.change.perc > 49] = NA
model.o.df$turnout.2012[model.o.df$turnout.2012 > 110] = NA
model.o.df$oth.perc2012[max(model.o.df$oth.perc2012,na.rm=T)] = NA
model.o.df$other_votes.perc[model.o.df$other_votes.perc ==
max(model.o.df$other_votes.perc,na.rm=T)] = NA
model.o.df$turnout.change.perc[model.o.df$turnout.change.perc < - 30] = NA
# model.o.df = subset(model.o.df, log.pop.sq.mile.2010 > median(log.pop.sq.mile.2010,na.rm=T))
} # Subsetting data for the models
require(rgdal); require(sp)
getwd()
#
wisc.spat.o <-
readOGR(
dsn = "Prepped files/wisc.spat.orig.geojson",
layer = "OGRGeoJSON",
disambiguateFIDs = T,
stringsAsFactors = F
)
wisc.spat.o.trans = spTransform(
wisc.spat.o,
CRS(
"+proj=utm +zone=16 +datum=WGS84 +ellps=WGS84 +units=m +no_defs"
)
)
ur.area<-sapply(slot(wisc.spat.o.trans, "polygons"), function(x) sapply(slot(x, "Polygons"), slot, "area"))
ur.area.s = lapply(ur.area,sum)
wisc.spat.o@data$muni.area = unlist(ur.area.s) / 1000000
wisc.spat.o@data$muni.dense = as.numeric(wisc.spat.o@data$pop) / wisc.spat.o@data$muni.area
as.numeric(wisc.spat.o@data$pop)
pop.join = with(model.o.df, data.frame(muni_county,pop))
wisc.spat.o@data = join(wisc.spat.o@data, pop.join, by = "muni_county")
wisc.spat.o@data$muni.dense = as.numeric(wisc.spat.o@data$pop) / wisc.spat.o@data$muni.area
wisc.spat.o@data$muni.dense
summary(wisc.spat.o@data$muni.dense)
wisc.spat.o@data$muni_county[max(wisc.spat.o@data$muni.dense,na.rm=T)]
wisc.spat.o@data$muni_county[max(wisc.spat.o@data$muni.dense,na.rm=T),]
max(wisc.spat.o@data$muni.dense,na.rm=T)
wisc.spat.o@data$muni_county[wisc.spat.o@data$muni.dense == max(wisc.spat.o@data$muni.dense,na.rm=T)]
wisc.spat.o@data$muni_county[wisc.spat.o@data$muni.dense == max(wisc.spat.o@data$muni.dense,na.rm=T),]
{ ### Creating a carto-presentable map
require(rgdal); require(sp); require(geojson)
# wisc.spat.o <-
#   readOGR(
#     dsn = "Prepped files/wisc.present.orig.geojson",
#     layer = "OGRGeoJSON",
#     disambiguateFIDs = T,
#     stringsAsFactors = F
#   )
wisc.spat.o.cut = wisc.spat.o
wisc.spat.o.cut@data[7:length(wisc.spat.o.cut@data)] = NULL
wisc.spat.o.cut@data$MCD_NAME = toupper(wisc.spat.o.cut@data$MCD_NAME)
wisc.join = wisc.spat.o.cut
wisc.join@data = join(wisc.join@data, model.o.df, by = "muni_county", match = "first")
colnames(wisc.join@data) = make.unique(colnames(wisc.join@data))
wisc.join@data$county_machine_vendor_dealer = as.character( wisc.join@data$county_machine_vendor_dealer)
wisc.join@data$demwinner = as.character( wisc.join@data$demwinner)
wisc.join@data$demwinner2012 = as.character( wisc.join@data$demwinner2012)
wisc.join@data$county = NULL
wisc.join@data$MCD_FIPS.1 = NULL
wisc.join@data[wisc.join@data == Inf] = NA
wisc.join@data[wisc.join@data == -Inf] = NA
wisc.join@data[is.na(wisc.join@data)] = NA
# unique(wisc.join@data$muni_county=="NA")
# wisc.join = wisc.join[-wisc.join@data$muni_county=="NA",]
# wisc.join = subset(wisc.join,wisc.join@data$muni_county!="NA")
wisc.join.df = as.data.frame(wisc.join)
# str(wisc.join.df)
# wisc.join@data = clean_names(wisc.join@data)
# require(geojson)
writeOGR(
wisc.join,
"Prepped files/wisc.present.orig.geojson",
layer = "wisc.join",
driver = "GeoJSON"
)
# geo_write(wisc.join, file = "~/Prepped files/wisc.present.orig.geojson")
# writeOGR(
#   wisc.join,
#   "Prepped files/wisc.present.orig.shp",
#   layer = "wisc.join",
#   driver = "ESRI Shapefile"
# )
} # Creating a carto-presentable map
write.csv(model.o.df,"modeldfward.o.csv")
wisc.spat.o@data$muni.dense = as.numeric(wisc.spat.o@data$pop) / wisc.spat.o@data$muni.area
density.join = with(wisc.spat.o@data, data.frame(muni_county,muni.dense))
model.o.df = join(model.o.df, density.join, by = "muni_county")
View(density.join)
{ ### Creating a carto-presentable map
require(rgdal); require(sp); require(geojson)
# wisc.spat.o <-
#   readOGR(
#     dsn = "Prepped files/wisc.present.orig.geojson",
#     layer = "OGRGeoJSON",
#     disambiguateFIDs = T,
#     stringsAsFactors = F
#   )
wisc.spat.o.cut = wisc.spat.o
wisc.spat.o.cut@data[7:length(wisc.spat.o.cut@data)] = NULL
wisc.spat.o.cut@data$MCD_NAME = toupper(wisc.spat.o.cut@data$MCD_NAME)
wisc.join = wisc.spat.o.cut
wisc.join@data = join(wisc.join@data, model.o.df, by = "muni_county", match = "first")
colnames(wisc.join@data) = make.unique(colnames(wisc.join@data))
wisc.join@data$county_machine_vendor_dealer = as.character( wisc.join@data$county_machine_vendor_dealer)
wisc.join@data$demwinner = as.character( wisc.join@data$demwinner)
wisc.join@data$demwinner2012 = as.character( wisc.join@data$demwinner2012)
wisc.join@data$county = NULL
wisc.join@data$MCD_FIPS.1 = NULL
wisc.join@data[wisc.join@data == Inf] = NA
wisc.join@data[wisc.join@data == -Inf] = NA
wisc.join@data[is.na(wisc.join@data)] = NA
# unique(wisc.join@data$muni_county=="NA")
# wisc.join = wisc.join[-wisc.join@data$muni_county=="NA",]
# wisc.join = subset(wisc.join,wisc.join@data$muni_county!="NA")
wisc.join.df = as.data.frame(wisc.join)
# str(wisc.join.df)
# wisc.join@data = clean_names(wisc.join@data)
# require(geojson)
writeOGR(
wisc.join,
"Prepped files/wisc.present.orig.geojson",
layer = "wisc.join",
driver = "GeoJSON"
)
# geo_write(wisc.join, file = "~/Prepped files/wisc.present.orig.geojson")
# writeOGR(
#   wisc.join,
#   "Prepped files/wisc.present.orig.shp",
#   layer = "wisc.join",
#   driver = "ESRI Shapefile"
# )
} # Creating a carto-presentable map
write.csv(model.o.df,"modeldfward.o.csv")
{ # Model data frame preparation
# Following Nate Cohn's method: https://twitter.com/Nate_Cohn/status/801226924156719104/photo/1?ref_src=twsrc%5Etfw
# I found it's better to use the non-logged version of pop.sq.mile.2010
ward.2016.2012.r.dem$log.pop.sq.mile.2010 = log(ward.2016.2012.r.dem$pop_sq_mile_2010)
# ratio college and income are both highly correlated so maybe don't use median income
# population density is highly correlated with black population, so I removed population density
# I was not able to effectively model Menonminee county with my data (it has a very high Amerindian population). So,
# I replaced the correlated and generally not significant 'white_pct' variable with 'white_nonwhite*
tch_make =  colnames(ward.2016.2012.r.dem)[grep("tch_make",colnames(ward.2016.2012.r.dem))]
make_tch = ward.2016.2012.r.dem[tch_make]
# summary(make_tch)
make_tch$tch_makedominion_voting_systems = NULL
make_tch$tch_makenot_applicable = NULL
make_tch$tch_makepopulex = NULL
make_tch$tch_makevote_pad = NULL
##
os_make =  colnames(ward.2016.2012.r.dem)[grep("os_make",colnames(ward.2016.2012.r.dem))]
make_os = ward.2016.2012.r.dem[os_make]
# summary(make_os)
make_os$os_makenot_applicable = NULL
make_os$os_makepopulex = NULL
make_os$os_makevote_pad = NULL
ward.2016.2012.o.dem$log.pop.sq.mile.2010 = log(ward.2016.2012.o.dem$pop_sq_mile_2010)
model.r.df = with(ward.2016.2012.r.dem, data.frame(MCD_FIPS,county, muni_county,
democrat_votes.perc, republican_votes.perc, other_votes.perc,
dem.change.perc,rep.change.perc,oth.change.perc,turnout.2016.perc,
county_paper_or_paperplusmachine, county_use_opt_scan,
county_machine_vendor_dealer, turnout.change.perc,
ratio_nocollege_college , log.pop.sq.mile.2010,
pop_sq_mile_2010,tch.use, os.use, bmd.use,
medianhouseholdincome_2009.2013, voters.tot2016, votes.tot2016,
dem.perc2012, rep.perc2012, oth.perc2012, turnout.2012,
votes.tot2012,
# inc_2015,inc_2015, unemp_rate, X._collegedegreepersons25._2013, pct_graduate,
# pct_male, age_med, pct_latino, pct_white, pct_black, pct_white,
pct_hs,
tch_prop,counted_absent_prop,rejected_absent_prop,
sameday_reg_prop,turnout_reg_feb,
total_ballots,registrants,late_registrants,tch_prop_2012,
total_ballots_2012,turnout_reg_2012, counted_absent_prop_2012,
rejected_absent_prop_2012,registrants_2012,late_registrants_2012
))
rownames(model.r.df) = model.r.df$muni_county
model.r.df$MCD_FIPS = as.character(model.r.df$MCD_FIPS)
tig_dems = read.csv("tiger_demographics.csv")
tig_dems_join = with(tig_dems,data.frame(geoid))
colnames(tig_dems_join) = "MCD_FIPS"
tig_dems_join$MCD_FIPS = gsub("06000US","",tig_dems_join$MCD_FIPS)
tig_dems_join$pop = tig_dems$pop
tig_dems_join$inc_2015 = tig_dems$percap_inc_2015
tig_dems_join$unemp_rate = tig_dems$unemp_1864_perc
tig_dems_join$pct_graduate = tig_dems$bach_perc
tig_dems_join$X._collegedegreepersons25._2013 = tig_dems$bach_perc
tig_dems_join$pct_white = tig_dems$white_perc
tig_dems_join$pct_black = tig_dems$black_perc
tig_dems_join$pct_latino = tig_dems$hisp_perc
tig_dems_join$pct_male = tig_dems$male_perc
tig_dems_join$age_med = tig_dems$age_med # NOTE THIS IS NOW MEDIAN AGE NOT PCT OLD
tig_dems_join$house_size_ave = tig_dems$house_size_ave
model.r.df = join(model.r.df,tig_dems_join, by = "MCD_FIPS")
} # Creating df
{ # Adding in vote change from Spring primary
model.reprim.df = read.csv("model_reprim.csv")
repprim_join = model.reprim.df[,c(3:22)]
colnames(repprim_join)[2:20] <- paste(colnames(repprim_join)[2:20],"reprim", sep = "_")
model.demprim.df = read.csv("model_demprim.csv")
demprim_join = model.demprim.df[,c(3:22)]
colnames(demprim_join)[2:20] <- paste(colnames(demprim_join)[2:20],"demprim", sep = "_")
model.r.df = join(model.r.df,repprim_join,by="muni_county")
model.r.df$trump_vote_diff = model.r.df$republican_votes.perc - model.r.df$votes_perc_trump_reprim
model.r.df$tch_prop_reprim_diff = model.r.df$tch_prop - model.r.df$tch_prop_reprim
model.r.df = join(model.r.df,demprim_join,by="muni_county")
model.r.df$clinton_vote_diff = model.r.df$democrat_votes.perc - model.r.df$votes_perc_clinton_demprim
model.r.df$tch_prop_demprim_diff = model.r.df$tch_prop - model.r.df$tch_prop_demprim
} # Adding in vote change from Spring primary
{ # Adding in vote change from 2012 to primaries
# model.edl2012.df = read.csv("edl.2012.municounty.data.csv")
# edl_join = model.edl2012.df[,c(2:12)]
# colnames(edl_join)[4:11] <- paste(colnames(edl_join)[4:11],"2012_num", sep = "_")
# model.r.df = join(model.r.df,edl_join,by="muni_county")
model.r.df$trump_prim_2012_vote_diff = model.r.df$votes_perc_trump_reprim - model.r.df$rep.perc2012
model.r.df$clinton_prim_2012_vote_diff = model.r.df$votes_perc_clinton_demprim - model.r.df$dem.perc2012
model.r.df$tch_prop_2012_reprim_diff = model.r.df$tch_prop_reprim - model.r.df$tch_prop_2012
model.r.df$tch_prop_2012_demprim_diff = model.r.df$tch_prop_demprim - model.r.df$tch_prop_2012
model.r.df$tch_prop_2012_2016_diff = model.r.df$tch_prop - model.r.df$tch_prop_2012
} # Adding in vote change from 2012 to primaries
{
# colnames(ward.2016.2012.r.dem)
# getwd()
# setwd("C:\\Users\\s_cas\\Dropbox\\Perso\\2016 voting election county results\\Wisconsin")
off_vote_machines = read.xlsx2("voting_equipment_by_municipality_09_2016_xlsx_78114.xlsx1207162619.xlsx",
sheetIndex = 1,
stringsAsFactors=F)
colnames(off_vote_machines)[3] = "os_model_off"
colnames(off_vote_machines)[4] = "tch_bmd_model_off"
off_vote_machines$tch_use_off = NA
off_vote_machines$tch_use_off = ifelse(off_vote_machines$tch_bmd_model_off == "Dominion (Premier)-Accuvote TSX" |
off_vote_machines$tch_bmd_model_off == "Dominion (Sequoia)/Command Central-Edge" |
off_vote_machines$tch_bmd_model_off == "Dominion (Sequoia)/Command Central-Edge; ES&S Automark" |
off_vote_machines$tch_bmd_model_off == "ES&S iVotronic",1, 0
)
off_vote_machines$bmd_use_off = NA
off_vote_machines$bmd_use_off = ifelse(off_vote_machines$tch_bmd_model_off == "Dominion ImageCast Evolution" |
off_vote_machines$tch_bmd_model_off == "ES&S Automark" |
off_vote_machines$tch_bmd_model_off == "ES&S ExpressVote" |
off_vote_machines$tch_bmd_model_off == "Populex-Populex 2.3" |
off_vote_machines$tch_bmd_model_off == "Vote Pad-Vote Pad (non-electronic)"
,1, 0
)
off_vote_machines$os_use_off = NA
off_vote_machines$os_use_off = ifelse(off_vote_machines$os_model_off == "None ",
0, 1
)
# unique(off_vote_machines$os_model_off)
off_vote_machines$os_model_off = ifelse(off_vote_machines$os_model_off == "None ",
NA, off_vote_machines$os_model_off
)
off_vote_machines$tch_model_off = NA
off_vote_machines$tch_model_off = ifelse(off_vote_machines$tch_use_off == 1,
off_vote_machines$tch_bmd_model_off, NA
)
off_vote_machines$bmd_model_off = NA
off_vote_machines$bmd_model_off = ifelse(off_vote_machines$bmd_use_off == 1,
off_vote_machines$tch_bmd_model_off, NA
)
off_vote_machines$tch_use_off_true = NA
off_vote_machines$tch_use_off_true = ifelse(off_vote_machines$os_use_off == 0,
off_vote_machines$tch_use_off, 0
)
# table(off_vote_machines$tch_use_off_true)
# #code_2 = substrRight(off_vote_machines$County, 2)
code_2 = gsub( " COUNTY.*$", "", off_vote_machines$County)
# #code_3 = substrRight(off_vote_machines$Municipality, 5)
code_3 = gsub( " -.*$", "", off_vote_machines$Municipality)
off_vote_machines$muni_county = paste(code_3,code_2, sep = " ")
#
# unique(grepl("550101201",model.r.df$MCD_FIPS))
# setdiff(off_vote_machines$muni_county, model.r.df$muni_county)
# off_vote_machines$muni_county[grep("TOWN OF GEORGETOWN  POLK", off_vote_machines$muni_county)] = "TOWN OF GEORGETOWN POLK"
# off_vote_machines$muni_county[grep("TOWN OF WINDSOR DANE", off_vote_machines$muni_county)] = "VILLAGE OF WINDSOR DANE"
# off_vote_machines$muni_county[grep("TOWN OF MAINE MARATHON", off_vote_machines$muni_county)] = "VILLAGE OF MAINE MARATHON"
# setdiff(model.r.df$muni_county, off_vote_machines$muni_county) # Difference of 47
# length(off_vote_machines$muni_county) # 1854
# length(model.r.df$muni_county) # 1900 Difference of 46. Plus the errant space = 47. Therefore, these places are simply not included in the official list?
off_vote_machines_cut = off_vote_machines
off_vote_machines$County = NULL
off_vote_machines$Municipality = NULL
model.r.df = join(model.r.df, off_vote_machines, by = "muni_county")
model.r.df$tch_model_off_full = NA
model.r.df$tch_model_off_full = with(model.r.df, ifelse(tch_model_off == "Dominion (Premier)-Accuvote TSX",
"Dominion (Premier)-Accuvote TSX", model.r.df$tch_model_off_full))
model.r.df$tch_model_off_full = with(model.r.df, ifelse(tch_model_off == "Dominion (Sequoia)/Command Central-Edge",
"Dominion (Sequoia)/Command Central-Edge",model.r.df$tch_model_off_full))
model.r.df$tch_model_off_full = with(model.r.df, ifelse(tch_model_off == "Dominion (Sequoia)/Command Central-Edge; ES&S Automark",
"Dominion (Sequoia)/Command Central-Edge",model.r.df$tch_model_off_full))
model.r.df$tch_model_off_full = with(model.r.df, ifelse(tch_model_off == "ES&S iVotronic",
"ES&S iVotronic",model.r.df$tch_model_off_full))
model.r.df$tch_model_off_full[is.na(model.r.df$tch_model_off_full)] = "aNone"
model.r.df$tch_model_off_full = with(model.r.df, ifelse(is.na(tch_use_off),
NA,model.r.df$tch_model_off_full))
# model.r.df[grep("tch_use_verivote.1",colnames(model.r.df))] = NULL
# model.r.df[grep("tch_use_verivote.2",colnames(model.r.df))] = NULL
#
colnames(model.r.df)[grep("tch.use",colnames(model.r.df),fixed = T)] = "tch_use_verivote"
colnames(model.r.df)[grep("os.use",colnames(model.r.df),fixed = T)] = "os_use_verivote"
colnames(model.r.df)[grep("bmd.use",colnames(model.r.df),fixed = T)] = "bmd_use_verivote"
colnames(model.r.df)[grep("X._collegedegreepersons25._2013",colnames(model.r.df))] = "coll_deg_plus25_2013"
} # voting machines
{
# The following are the variables used by the Election snapshot in their models:
# Income 2015, inc_2015
# Unemployment rate Sept 2015, unemp_rate
# Male ACS 5-year, pct_male
# Age 62 + ACS 5 year, age_med
# Hispanic or Latino ACS 5 year, pct_latino
# White ACS 5-year, pct_white
# Black ACS 5 year, pct_black
# HS (high school) or less ACS 5 year, pct_hs
# Pop sq. mile is highly correlated with pct_black and so should be removed
model.r.df$demwinner = NA
model.r.df$demwinner = ifelse(model.r.df$democrat_votes.perc >
model.r.df$republican_votes.perc &
!is.na(model.r.df$democrat_votes.perc), 1,0)
model.r.df$demwinner = factor(model.r.df$demwinner)
model.r.df$demwinner2012 = NA
model.r.df$demwinner2012 = ifelse(model.r.df$dem.perc2012 >
model.r.df$rep.perc2012 &
!is.na(model.r.df$democrat_votes.perc), 1,0)
model.r.df$demwinner2012 = factor(model.r.df$demwinner2012)
# model.r.df$tch.use = as.factor(as.character(model.r.df$tch.use))
# model.r.df$os.use = as.factor(as.character(model.r.df$os.use))
} # Demwinner 2012
{
# Only keep municipalities with 20 or more people voting - below this is too skewed
model.r.df = subset(model.r.df, votes.tot2016 > 19)
model.r.df$turnout.2012[model.r.df$turnout.2012 > 120] = NA
model.r.df$turnout.2012[model.r.df$turnout.2012 < 30] = NA
model.r.df$turnout.2016.perc[model.r.df$votes.tot2016 < 20] = NA
model.r.df$turnout.2012[model.r.df$votes.tot2012 < 20] = NA
turnout.high.2012 = subset(model.r.df, turnout.2012 > 100)
model.r.df$dem.change.perc[model.r.df$dem.change.perc < - 49] = NA
model.r.df$rep.change.perc[model.r.df$rep.change.perc < - 49] = NA
model.r.df$rep.change.perc[model.r.df$rep.change.perc > 49] = NA
model.r.df$turnout.2012[model.r.df$turnout.2012 > 110] = NA
model.r.df$oth.perc2012[max(model.r.df$oth.perc2012,na.rm=T)] = NA
model.r.df$other_votes.perc[model.r.df$other_votes.perc ==
max(model.r.df$other_votes.perc,na.rm=T)] = NA
model.r.df$turnout.change.perc[model.r.df$turnout.change.perc < - 30] = NA
# model.r.df = subset(model.r.df, log.pop.sq.mile.2010 > median(log.pop.sq.mile.2010,na.rm=T))
} # Subsetting data for the model
{ # Getting municipality densities
require(rgdal); require(sp)
getwd()
#
wisc.spat.r <-
readOGR(
dsn = "Prepped files/wisc.spat.orig.geojson",
layer = "OGRGeoJSON",
disambiguateFIDs = T,
stringsAsFactors = F
)
# First, getting population densities. Transforming to utm, zone 16 for Wisconsin
wisc.spat.r.trans = spTransform(
wisc.spat.r,
CRS(
"+proj=utm +zone=16 +datum=WGS84 +ellps=WGS84 +units=m +no_defs"
)
)
ur.area<-sapply(slot(wisc.spat.r.trans, "polygons"), function(x) sapply(slot(x, "Polygons"), slot, "area"))
ur.area.s = lapply(ur.area,sum)
wisc.spat.o@data$muni.area = unlist(ur.area.s) / 1000000
pop.join = with(model.r.df, data.frame(muni_county,pop))
wisc.spat.o@data = join(wisc.spat.o@data, pop.join, by = "muni_county")
wisc.spat.o@data$muni.dense = as.numeric(wisc.spat.o@data$pop) / wisc.spat.o@data$muni.area
density.join = with(wisc.spat.o@data, data.frame(muni_county,muni.dense))
model.r.df = join(model.r.df, density.join, by = "muni_county")
density.join = with(wisc.spat.r@data, data.frame(muni_county,muni.dense))
model.r.df = join(model.r.df, density.join, by = "muni_county")
# http://spatialreference.rrg/ref/epsg/4326/html/
# GEOGCS["WGS 84",
#        DATUM["WGS_1984",
#              SPHEROID["WGS 84",6378137,298.257223563,
#                       AUTHORITY["EPSG","7030"]],
#              AUTHORITY["EPSG","6326"]],
#        PRIMEM["Greenwich",0,
#               AUTHORITY["EPSG","8901"]],
#        UNIT["degree",0.01745329251994328,
#             AUTHORITY["EPSG","9122"]],
#        AUTHORITY["EPSG","4326"]]
} # Municipality densities
{
require(rgdal); require(sp); require(geojson)
# wisc.spat.r <-
#   readOGR(
#     dsn = "Prepped files/wisc.present.orig.geojson",
#     layer = "OGRGeoJSON",
#     disambiguateFIDs = T,
#     stringsAsFactors = F
#   )
wisc.spat.r.cut = wisc.spat.r
wisc.spat.r.cut@data[7:length(wisc.spat.r.cut@data)] = NULL
wisc.spat.r.cut@data$MCD_NAME = toupper(wisc.spat.r.cut@data$MCD_NAME)
wisc.join = wisc.spat.r.cut
wisc.join@data = join(wisc.join@data, model.r.df, by = "muni_county", match = "first")
colnames(wisc.join@data) = make.unique(colnames(wisc.join@data))
wisc.join@data$county_machine_vendor_dealer = as.character( wisc.join@data$county_machine_vendor_dealer)
wisc.join@data$demwinner = as.character( wisc.join@data$demwinner)
wisc.join@data$demwinner2012 = as.character( wisc.join@data$demwinner2012)
wisc.join@data$county = NULL
wisc.join@data$MCD_FIPS.1 = NULL
wisc.join@data[wisc.join@data == Inf] = NA
wisc.join@data[wisc.join@data == -Inf] = NA
wisc.join@data[is.na(wisc.join@data)] = NA
# unique(wisc.join@data$muni_county=="NA")
# wisc.join = wisc.join[-wisc.join@data$muni_county=="NA",]
# wisc.join = subset(wisc.join,wisc.join@data$muni_county!="NA")
wisc.join.df = as.data.frame(wisc.join)
# str(wisc.join.df)
# wisc.join@data = clean_names(wisc.join@data)
# require(geojson)
writeOGR(
wisc.join,
"Prepped files/wisc.present.rcnt.geojson",
layer = "wisc.join",
driver = "GeoJSON"
)
# geo_write(wisc.join, file = "~/Prepped files/wisc.present.rcnt.geojson")
# writeOGR(
#   wisc.join,
#   "Prepped files/wisc.present.rcnt.shp",
#   layer = "wisc.join",
#   driver = "ESRI Shapefile"
# )
} # Creating a carto-presentable map
write.csv(model.r.df,"modeldfward.r.csv")
